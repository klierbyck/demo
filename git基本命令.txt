1.选中项目文件夹，右键选择"$ git bash here"

2.在cmd中输入"$ git init"初始化一个本地的仓库

3.使用"$ git add '文件名'"将一个没有被跟踪的文件添加到跟踪列表或"$ git add --all"将所有未被跟踪的文件添加到跟踪列表，如果不想添加某些文件到跟踪列表可以在项目的根目录建立一个.gitignore的文件，将要忽视的文件名添加到此文件的内容中

4.通过"$ git status"查看本地仓储的状态;"$ git status -s"是输出简要的变更日志，通过git log获取详细日志

5."$ git commit -m '说明文字'" 将本地的变化提交的本地的仓库文件夹存档。备注：如果修改了代码，可以直接使用git commit -am '说明文字' 跳过add步骤。

6."$ git diff"可以用于对比当前状态和版本库中状态的变化

7.在github上创建一个和项目名字相同的仓储，使用以下两条命令提交本地代码到github服务器
	$ git remote add origin https://github.com/klierbyck/xiangmu.git
	$ git push -u origin master

8.使用以下命令将github上更新的代码下载到本地
	$ git pull origin master

9.删除本地文件 $ git rm -r '文件名'，停止文件跟踪但不删除文件 $ git rm --cached '文件名'

10.其他
	查看本地分支：$ git branch
	查看远端分支：$ git branch -r
	查看本地和远程分支： $ git branch -a
	创建分支：$ git branch '分支名'
	切换分支：$ git checkout '分支名'
	建立并且换分支：$ git checkout -b '分支名'
	提交分支：$ git push -u origin '分支名'
	删除本地已合并分支：先到master，然后$ git branch –d '分支名'
	删除本地未合并分支：先到master，然后$ git branch –D '分支名'
	删除远端分支：先到master，然后$ git push origin –-delete '分支名'
	合并分支：先到master，然后使用$ git merge origin '分支名'

11.从远程下载一份最新的代码到本地，使用$ git clone '远端地址'

12.查看版本$ git log或$ git log --pretty=oneline
回退历史版本$ git revert 'git log中的commit代码'，之后按i输入备注，然后esc 输入':wq'按回车
切换代码版本$ git reset --hard 'git log中的commit代码'



github的SSH配置如下：
一、设置Git的user name和email
$  git config --global user.name "输入你的用户名"
$  git config --global user.email "输入你的邮箱"
修改
$  git config --global --replace-all user.email "输入你的新邮箱" 
$  git config --global --replace-all user.name "输入你的新用户名"

二、生成SSH密钥过程：
1.查看是否已经有了ssh密钥：cd ~/.ssh
如果没有密钥则不会有此文件夹，有则备份删除
2.生存密钥：
$ ssh-keygen -t rsa -C "输入你的邮箱"
按3个回车，密码为空。

Your identification has been saved in /home/tekkub/.ssh/id_rsa.
Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.
The key fingerprint is:
………………
最后得到了两个文件：id_rsa和id_rsa.pub

3.添加密钥到ssh：ssh-add 文件名
需要之前输入密码。
4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。
打开https://github.com/ ，登陆、然后添加ssh。

开始工作：
1.克隆远端代码仓库
	$ git clone "版本库的网址"
2.查看远端分支
	$ git branch -r
3.建立本地与远端对应开发分支dev（远端已经存在dev分支）
	$ git checkout dev 或者 $ git checkout -b dev origin/dev
4.将origin/dev分支上的代码，更新到本地dev分支上
	$ git pull
5.基于dev分支，创建新分支local,并切换到local分支（一定要创建新分支进行开发，决不能基于本地dev分支开发）
	$ git checkout – b local
6.在local分支上开发
	查看分支上文件变动$ git status
	添加到暂存区$ git add .
	将暂存区的文件提交到版本库$ git commit -m "说明"
7.切换到本地dev分支
	$ git checkout dev
8.将origin/dev分支上的代码，更新到本地dev分支上
	$ git pull
9.切换到本地local分支
	$ git checkout local
10.本地dev分支上的最新代码，合并到本地local分支上$ git merge dev。如果遇到文件冲突的问题，需要到冲突所在的文件下手动修改，修改好后，执行$ git add .执行$ git commit -m "说明"。
	$ git merge dev
11.切换到本地dev分支
	$ git checkout dev
12.将本地dev分支上的代码提交到服务器上。
	$ git push
